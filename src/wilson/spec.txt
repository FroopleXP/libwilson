Wilson client events

interface IAuthenticationHeaders {
    jwt: string;
}

enum EClientAction {
    NEW_MESSAGE = "NEW_MESSAGE",
    AUTHENTICATE_USER = "AUTHENTICATE_USER",
    REGISTER_USER = "REGISTER_USER",
}

interface IClientNewMessagePayload {
    auth: IAuthenticationHeaders,
    message: string;
    user_to: string;
}

interface IClientEvent<T> {
    action: EClientAction,
    payload: T
}

const newMessageEvent: IClientEvent<IClientNewMessagePayload> = {
    action: EClientAction.NEW_MESSAGE,
    payload: {
        auth: {
            jwt: "xxxx-xxxx-xxxxxxxx"
        },
        message: "Hi, there!",
        user_to: "johnsdailydigits"
    }
}


----------------------------------

Introducing conversations...

Conversations can include multiple participants.
All messages must be part of a conversation.
A user an choose to opt. of receiving messages from a conversation.

User A wants to talk to B, C

User A send 'NEW_CONVERSATION' event to to server with B, C as participants

Server generates a 'NEW_CONVERSATION_REQUEST' event with A, B, C as participants
and sends it to users B & C.

Once received, each user can then send a 'NEW_CONVERSATION_ACK' to the server.
This includes the ID of the conversation they want to accept / reject. To start
receving messages from this conversation, the user must accept. Their session record
is then updated to allow messages from this conversation.